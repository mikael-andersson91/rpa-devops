name: UiPath Pack

# Reusable workflow for packing UiPath project(s) into .nupkg files and uploading them as builld artifacts to GitHub Actions

on:
  # Triggers the workflow on call from other repository
  workflow_call:
    inputs:
      uipcli-version:
        description: "Version of the UiPath CLI to retrieve from the UiPath Official Feed. If not provided, the default version will be used"
        required: false
        type: string
        default: "24.10.9050.17872"
      environment:
        required: false
        description: "Name of the GitHub Environment to perform deployment through"
        type: string
        default: ''
      version:
        required: false
        description: "SemVer version tag, if not provided a prerelease version or release candidate version will be generated based on the latest tag of the repository"
        type: string
        default: ''
      project-file-paths: 
        required: false
        description: "Relative paths to UiPath project.json files to perform the deployment of. Can be used as multiline input. If not provided, the actions will scan for all project.json files in the repository"
        type: string
      orchestrator-url:
        required: false
        default: https://cloud.uipath.com/
        description: "Base URL to UiPath Automation Cloud or Automation Suite. Example: https://cloud.uipath.com/"
        type: string
      orchestrator-folder:
        required: true
        description: "Full display name of the folder in Orchestrator where the tests and deployment will happen"
        type: string
      orchestrator-tenant:
        required: true
        type: string
        description: "Name of the Orchestrator tenant where the tests and deployment will happen"
      orchestrator-app-scope:
        required: false
        default: "OR.Settings OR.Settings.Read OR.Robots OR.Robots.Read OR.Machines OR.Machines.Read OR.Execution OR.Assets OR.Jobs OR.Users OR.Users.Read OR.Monitoring OR.Tasks OR.Folders OR.Folders.Read OR.BackgroundTasks OR.TestSets OR.TestSetExecutions OR.TestSetSchedules OR.TestDataQueues"
        description: "Scopes required for the external application to perform the deployment"
        type: string
      organization-id:
        required: true
        description: "ID of the UiPath organization"
        type: string
      release-notes:
        required: false
        description: "Release notes for the package version being deployed"
        type: string
    secrets:
      ORCHESTRATOR_APP_ID:
        required: false
        description: "Application ID for the External Application created in Orchestrator. If the secret is set up in a GitHub Environment, the value will be retrieved based on the provided environment"
      ORCHESTRATOR_APP_SECRET:
        required: false
        description: "Application Secret for the External Application created in Orchestrator. If the secret is set up in a GitHub Environment, the value will be retrieved based on the provided environment"
    outputs:
      packages-artifact:
        description: "Name of artifact containing the .nupkg files generated by the pack step"
        value: ${{ jobs.pack.outputs.packages-artifact }}
      

jobs:
  pack:
      permissions:
        id-token: write
        contents: read
      runs-on: windows-latest
      environment: ${{ inputs.environment }}
      outputs:
        packages-artifact: ${{ steps.set-packages-output.outputs.packages-artifact }}
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - name: Checkout repository
          uses: actions/checkout@v4
          with:
              fetch-depth: 0

        - name: Setup UiPath CLI
          uses: Mikael-RnD/setup-uipath@v1
          with:
            version: ${{ inputs.uipcli-version }}

        - name: Slugify github variables
          uses: rlespinasse/github-slug-action@v5

        - name: Set Version
          id: set-version
          run: |
            if (-not "${{ inputs.version }}") {
              $tag = git tag | Select-String -Pattern '^v(\d+\.\d+\.\d+)$' | ForEach-Object { $_.Matches[0].Groups[1].Value } | Sort-Object -Property { [version]$_ } | Select-Object -Last 1
              if (-not $tag) {
                $tag = "v0.0.0"
              }
              $version = $tag -replace '^v'
              $incrementedVersion = ($version -split '\.') | ForEach-Object { [int]$_ }
              $incrementedVersion[2]++
              $incrementedVersion = -join ($incrementedVersion -join '.')
              if ($env:GITHUB_EVENT_NAME -eq "pull_request") {
                Write-Output "version=$incrementedVersion-pr-${{ github.event.pull_request.number }}-${{ env.GITHUB_EVENT_PULL_REQUEST_HEAD_SHA_SHORT }}" >> $env:GITHUB_OUTPUT
              } else {
                  Write-Output "version=$incrementedVersion-rc-${{ env.GITHUB_SHA_SHORT }}" >> $env:GITHUB_OUTPUT
              }
            } else {
              $tag = "${{ inputs.version }}"
              $version = $tag -replace '^v'
              Write-Output "version=$version" >> $env:GITHUB_OUTPUT
            }

        - id: pack
          name: UiPath Pack
          uses: Mikael-RnD/UiPath-Pack@v1
          with:
            projectFilePaths: ${{ inputs.project-file-paths }}
            orchestratorUrl: ${{ inputs.orchestrator-url }}
            orchestratorTenant: ${{ inputs.orchestrator-tenant }}
            orchestratorFolder: ${{ inputs.orchestrator-folder }}
            orchestratorApplicationId: ${{ secrets.ORCHESTRATOR_APP_ID }}
            orchestratorApplicationSecret: ${{ secrets.ORCHESTRATOR_APP_SECRET }}
            orchestratorApplicationScope: ${{ inputs.orchestrator-app-scope }}
            orchestratorLogicalName: ${{ inputs.organization-id }} 
            projectVersion: ${{ steps.set-version.outputs.version }}
            releaseNotes: ${{ inputs.release-notes }}
        
        - id: set-packages-output
          name: Set packages artifact output
          run: | 
            $artifactName = "packages"
            if ([string]::IsNullOrEmpty("${{ inputs.environment }}"))
            { 
              Write-Output "packages-artifact=$artifactName-${{ steps.set-version.outputs.version }}" >> $Env:GITHUB_OUTPUT
            }               
            else 
            {
              Write-Output "packages-artifact=$artifactName-${{ inputs.environment }}-${{ steps.set-version.outputs.version }}" >> $Env:GITHUB_OUTPUT
            }
            
        # Upload packages generated by pack step as build artifacts to be handled by deploy job
        - id: upload-packages
          name: Upload .nupkg Packages
          uses: actions/upload-artifact@v4
          with:
            name: ${{ steps.set-packages-output.outputs.packages-artifact }}
            path: ${{ steps.pack.outputs.packagesPath }}
            if-no-files-found: error
            retention-days: 90